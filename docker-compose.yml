

services:
  minio:
    image: minio/minio:latest
    container_name: awstools-minio
    ports:
      - "9000:9000"    # API
      - "9001:9001"    # Console
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - awstools-network

  # Cliente MinIO para setup inicial
  minio-setup:
    image: minio/mc:latest
    container_name: awstools-minio-setup
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      mc alias set local http://minio:9000 minioadmin minioadmin;
      mc mb local/estellarx --ignore-existing;
      mc mb local/test-bucket --ignore-existing;
      mc mb local/backup --ignore-existing;
      echo 'Buckets criados com sucesso!';
      mc policy set download local/estellarx;
      mc policy set download local/test-bucket;
      echo 'Políticas configuradas!';
      exit 0;
      "
    networks:
      - awstools-network

  # Serviço de desenvolvimento Go (opcional)
  go-dev:
    image: golang:1.21
    container_name: awstools-go-dev
    volumes:
      - .:/app
    working_dir: /app
    environment:
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      AWS_S3_ENDPOINT: http://minio:9000
      AWS_TEST_BUCKET: estellarx
    depends_on:
      - minio
      - minio-setup
    networks:
      - awstools-network
    command: sleep infinity  # Mantém container rodando

volumes:
  minio-data:
    driver: local

networks:
  awstools-network:
    driver: bridge
